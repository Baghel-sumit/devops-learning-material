******** Demo - how to install docker ********

> uninstall old docker
> install community version of docker

******** Docker hub ********

> search and follow the instructions


******** Docker basic commands ********

> docker run [image_name:version] ( run/download - start a container, it uses default version latest )
> docker ps ( list running containers )
> docker ps -a ( list all containers )
> docker stop [image_name/image_id] (to stop the container)
> docker rm [image_name/image_id] (to remove the container)
> docker images (list the images with their sizes)
> docker rmi [image_id/image_name] (to remove the images)
> docker pull [image_name] (pull the image not run)
> docker run [image_name] sleep [time in ms eg: 5] (to run the container and after some time it will get slept)
> docker exec [image_name] cat [file_path] (to execute a file instructions)
> docker run -d [image_name] (run in the background)
> docker attach [container_id] (attach back to the container which is running in the background)
> docker --name [container_name] [image_name/image_id] (running a image with a naming the container)
> docker inspect [container_name] (to get the all information about a container in json formate)
> docker logs [container_id/container_name] (to see the logs of the container)

******** Docker commands examples ********

> docker run [container_name] cat /etc/*release*
> docker run [container_name] sleep 15
> docker run -d [container_name] sleep 15 ( running in background )
> docker attach [container_id] ( back to the container foreground )
> docker stop [container_id] (to stop the container which is running)


** Note: Timer container, it runs continuously and print current time, it never stops as time never stops so to stop you have to press `ctrl + c`


******** Docker Images ********

Q. How to create my own Images

-> Create a docker file with set of instructions like below -

  FROM Ubuntu
  RUN apt-get update
  RUN apt-get install python

  RUN pip install flask
  RUN pip install flask-mysql

  COPY . /opt/source-code

  ENTRYPOINT FLASK_APP=/opt/source-code/app.py flask run

-> after saving this file run below command to create image locally -

> docker build Dockerfile -t [folder_path]

-> To make it available on docker registry use below command - 

> docker push [image_name]

******** Structure of docker file ********

Dockerfile

[INSTRUCTION] [ARGUMENT]

-> it uses layered architecture i.e. step by step process to follow

-> to see the history of instructions

> docker history [folder_path]

-> All the layers is cached by the docker.
-> we can containerize everything.


*** > docker run -it ubuntu bash ( to run the bash of ubuntu )

******** Environment Variables ********

> docker run -e [variable_name]=[value] [image_name]
